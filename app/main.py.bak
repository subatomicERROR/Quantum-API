import os
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse

from app.config import CONF
from app.security.api_key import require_api_key
from app.routers.health import router as health_router
from app.services.quantum_backend import get_backend_choice, select_backend

cfg, env, settings = CONF["cfg"], CONF["env"], CONF["settings"]

app = FastAPI(
    title=cfg["app"]["name"],
    version=cfg["app"]["version"],
    debug=settings["debug"],
    docs_url=cfg["app"]["docs_route"],
    redoc_url=cfg["app"]["redoc_route"]
)

# --- CORS Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings["cors_origins"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- API Key middleware ---
@app.middleware("http")
async def auth_and_rate_limit(request: Request, call_next):
    api_key = request.headers.get("x-api-key") or os.environ.get("QUANTUM_API_KEY")
    if not api_key:
        raise HTTPException(status_code=401, detail="Missing API key")
    await require_api_key(request, override_key=api_key)
    return await call_next(request)

# --- Enterprise Landing Page ---
@app.get("/", response_class=HTMLResponse)
def landing_page():
    return f"""
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Quantum-API | Hyper-Intelligent Backend</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
<style>
    /* Global Styles */
    html, body {{
        margin: 0; padding: 0; width: 100%; height: 100%;
        font-family: 'Inter', sans-serif;
        overflow: hidden; background: #0b0c10; color: #c5c6c7;
    }}
    a {{ text-decoration: none; }}
    /* Container */
    .container {{
        position: relative; z-index: 1;
        display: flex; flex-direction: column; justify-content: center; align-items: center;
        height: 100%; text-align: center; padding: 0 2em;
    }}
    h1 {{
        font-size: 4em; color: #00ffd6; font-weight: 700; margin: 0; letter-spacing: 2px;
    }}
    p {{
        font-size: 1.5em; color: #45a29e; margin-top: 0.5em;
    }}
    .btn {{
        margin-top: 2em; padding: 1em 2em; font-size: 1.2em;
        color: #0b0c10; background: #00ffd6; border-radius: 12px;
        transition: 0.3s ease; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
    }}
    .btn:hover {{
        background: #45a29e; color: #fff; transform: translateY(-3px); box-shadow: 0 8px 25px rgba(0,0,0,0.35);
    }}
    /* Canvas */
    canvas#network {{
        position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 0;
        background: radial-gradient(circle at center, #0b0c10 0%, #1f2833 100%);
    }}
</style>
</head>
<body>
<canvas id="network"></canvas>
<div class="container">
    <h1>Quantum-API</h1>
    <p>Hyper-Intelligent Quantum Backend</p>
    <p>Environment: {env}</p>
    <a class="btn" href="/docs">Explore API Docs</a>
</div>
<script>
const canvas = document.getElementById('network');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const nodes = [];
const nodeCount = 100;
for(let i=0;i<nodeCount;i++){{
    nodes.push({{ x: Math.random()*canvas.width, y: Math.random()*canvas.height, vx: (Math.random()-0.5)*0.8, vy: (Math.random()-0.5)*0.8, r: Math.random()*2+1 }});
}}

// Draw connections
function connectNodes() {{
    for(let i=0;i<nodes.length;i++){{
        for(let j=i+1;j<nodes.length;j++){{
            const dx=nodes[i].x-nodes[j].x;
            const dy=nodes[i].y-nodes[j].y;
            const dist=Math.sqrt(dx*dx+dy*dy);
            if(dist<180){{
                ctx.beginPath();
                ctx.strokeStyle=`rgba(0,255,214,${1-dist/180})`;
                ctx.moveTo(nodes[i].x,nodes[i].y);
                ctx.lineTo(nodes[j].x,nodes[j].y);
                ctx.stroke();
            }}
        }}
    }}
}}

function animate(){{
    ctx.clearRect(0,0,canvas.width,canvas.height);
    nodes.forEach(n=>{{
        n.x+=n.vx; n.y+=n.vy;
        if(n.x<0||n.x>canvas.width) n.vx*=-1;
        if(n.y<0||n.y>canvas.height) n.vy*=-1;
        ctx.beginPath(); ctx.arc(n.x,n.y,n.r,0,Math.PI*2); ctx.fillStyle='#00ffd6'; ctx.fill();
    }});
    connectNodes();
    requestAnimationFrame(animate);
}}
animate();

// Mouse hover interaction
window.addEventListener('mousemove', e => {{
    nodes.forEach(n=>{{
        const dx = n.x - e.clientX;
        const dy = n.y - e.clientY;
        const dist = Math.sqrt(dx*dx + dy*dy);
        if(dist < 120){{
            n.vx += dx*0.0007;
            n.vy += dy*0.0007;
        }}
    }});
}});
window.addEventListener('resize',()=>{{ canvas.width=window.innerWidth; canvas.height=window.innerHeight; }});
</script>
</body>
</html>
"""

# --- Quantum backend routes ---
@app.get("/quantum/backend")
def current_backend():
    return get_backend_choice()

@app.post("/quantum/backend/select")
def switch_backend(name: str):
    return select_backend(name)

# --- Health & other routers ---
app.include_router(health_router)
